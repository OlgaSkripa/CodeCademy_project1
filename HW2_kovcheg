{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/OlgaSkripa/CodeCademy_project1/blob/main/%D0%9A%D0%BE%D0%BF%D0%B8%D1%8F_%D0%B1%D0%BB%D0%BE%D0%BA%D0%BD%D0%BE%D1%82%D0%B0_%22%D0%9A%D0%BE%D0%BF%D0%B8%D1%8F_%D0%B1%D0%BB%D0%BE%D0%BA%D0%BD%D0%BE%D1%82%D0%B0_%22%D0%9A%D0%BE%D0%BF%D0%B8%D1%8F_%D0%B1%D0%BB%D0%BE%D0%BA%D0%BD%D0%BE%D1%82%D0%B0_%22%D0%9A%D0%BE%D0%BF%D0%B8%D1%8F_%D0%B1%D0%BB%D0%BE%D0%BA%D0%BD%D0%BE%D1%82%D0%B0_%22hw_2_ipynb%22%22%22%22.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# <b>Домашнее задание 2</b>"
      ],
      "metadata": {
        "id": "pjgbgFtp-Exl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Важный комментарий: **назовите** файл решения так, чтобы преподаватель **понимал**, кто сделал его.\n",
        "\n",
        "Большое спасибо и успехов :)"
      ],
      "metadata": {
        "id": "3ntvC_39ER7Q"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "<center>\n",
        "<img src=\"https://meme-generator.com/wp-content/uploads/mememe/2019/11/mememe_cb8e239ef97eb73a7d04ecf46ed4bf5c-1.jpg\" alt=\"YOU-ROCK\" width=\"500\" height=\"300\">\n",
        "</center>"
      ],
      "metadata": {
        "id": "WtvsIKrVZmbV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 1</b>"
      ],
      "metadata": {
        "id": "VaEW95Gq-Gig"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Вы работаете аналитиком в торговой сети и изучаете суммарную прибыль по каждой из категории товаров.\n",
        "Найдите товар, приносящий максимальную суммарную прибыль.\n",
        "\n",
        "ФОРМАТ ВВОДА\n",
        "Записи о продаже товаров: название товара и, через запятую, полученная с этой продажи прибыль (целое число).\n",
        "Каждая запись вводится с новой строки. Название товара может содержать любые символы, кроме запятой.\n",
        "Один товар могут продавать любое количество раз, но в каждой строке указывается информация только про одну продажу.\n",
        "Когда записи заканчиваются, на отдельной строке вводится слово \"END\".\n",
        "\n",
        "ФОРМАТ ВЫВОДА\n",
        "Название товара, который принес наибольшую суммарную прибыль и, через пробел, сумма этой прибыли.\n",
        "Гарантируется, что такой товар только один.\n",
        "\n",
        "Для примера:\n",
        "Ввод\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "Шоколад,1000\n",
        "Мармеладки,600\n",
        "Шоколад,6000\n",
        "Киндер-сюрприз,1000\n",
        "Мармеладки,300\n",
        "END\n",
        "--------------------------------------------------\n",
        "Шоколад 7000\n",
        "\n",
        "Шоколад,1000\n",
        "END\n",
        "--------------------------------------------------\n",
        "Шоколад 1000\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "Bk7w19Fn-YAG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dict_sales = {}\n",
        "\n",
        "while True:\n",
        "  line = input().strip()\n",
        "  if line == 'END':\n",
        "    break\n",
        "  try:\n",
        "    product, price = line.rsplit(',',1)\n",
        "    price = int(price)\n",
        "    dict_sales[product] = dict_sales.get(product,0)+price\n",
        "  except ValueError:\n",
        "    print('wrong data was given')\n",
        "\n",
        "if dict_sales:\n",
        "  max_value = max(dict_sales.values())\n",
        "  for key, value in dict_sales.items():\n",
        "    if value == max_value:\n",
        "      print(key,value)"
      ],
      "metadata": {
        "id": "J4T-4CIMXHi3",
        "outputId": "a934dad0-9ac5-4ee8-bc82-8025820b7826",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Шоколад,1000\n",
            "Мармеладки,600\n",
            "Шоколад,6000\n",
            "Киндер-сюрприз,1000\n",
            "Мармеладки,300\n",
            "END\n",
            "Шоколад 7000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 2</b>"
      ],
      "metadata": {
        "id": "7oGsmOxw-UQk"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3j8oPrLd9aX3"
      },
      "outputs": [],
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Перед выборами политики решают задекларировать доходы.\n",
        "Будем считать, что один политик может подать декларацию несколько раз на разные суммы.\n",
        "Помогите собрать информацию о политиках и всех их доходах.\n",
        "\n",
        "ФОРМАТ ВВОДА\n",
        "Записи о доходах: фамилия политика и, через запятую и пробел, доход, который он задекларировал (целое число).\n",
        "Каждая запись вводится с новой строки. Фамилия политика может содержать любые символы, кроме запятой.\n",
        "Один политик может подать несколько деклараций, но в каждой строке указывается только одна сумма.\n",
        "Когда записи заканчиваются, на отдельной строке вводится слово \"END\".\n",
        "Далее вводится целое число — значение, которое не должны превышать суммарные доходы политика.\n",
        "\n",
        "ФОРМАТ ВЫВОДА\n",
        "Фамилии политиков, суммарные доходы которых превышают установленную границу.\n",
        "Фамилии должны выводиться через запятую и пробел.\n",
        "\n",
        "Для примера:\n",
        "Ввод\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "Иванов, 12234\n",
        "Петров, 6739\n",
        "Сергеев, 4573\n",
        "Пушкин, 2467\n",
        "Иванов, 12\n",
        "Пушкин, 789\n",
        "Сергеев, 3456\n",
        "Пушкин, 13\n",
        "END\n",
        "3500\n",
        "--------------------------------------------------\n",
        "Иванов, Петров, Сергеев\n",
        "\n",
        "Пожарский, 12\n",
        "Пожарская, 346\n",
        "Иванов-Петров, 34623\n",
        "Иванов-Петров, 2573\n",
        "END\n",
        "50000\n",
        "--------------------------------------------------\n",
        "\n",
        "\n",
        "''';"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dict_politics={}\n",
        "\n",
        "while True:\n",
        "  line = input().strip()\n",
        "  if line == 'END':\n",
        "    break\n",
        "  try:\n",
        "    politician, income = line.rsplit(',',1)\n",
        "    income = int(income)\n",
        "    dict_politics[politician] = dict_politics.get(politician,0)+income\n",
        "  except ValueError:\n",
        "    print('wrong input data')\n",
        "if dict_politics:\n",
        "  max_income = int(input('Input the maximum allowed income: '))\n",
        "  thief_set = {key for key,value in dict_politics.items() if value>max_income}\n",
        "  print(', '.join(map(str,thief_set)))\n",
        "\n"
      ],
      "metadata": {
        "id": "6IcQoWI6XInS",
        "outputId": "61955f00-d205-47fc-88ce-85acab891485",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Иванов, 12234\n",
            "Петров, 6739\n",
            "Сергеев, 4573\n",
            "Пушкин, 2467\n",
            "Иванов, 12\n",
            "Пушкин, 789\n",
            "Сергеев, 3456\n",
            "Пушкин, 13\n",
            "END\n",
            "Input the maximum allowed income: 3500\n",
            "Сергеев, Иванов, Петров\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 3</b>"
      ],
      "metadata": {
        "id": "xxWXsauJ-WOU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Вы планируете посетить концерт одной из своих любимых групп во время летнего отпуска.\n",
        "Найдите группу, у которой будет наибольшее количество концертов в 2023 году.\n",
        "\n",
        "ФОРМАТ ВВОДА\n",
        "Записи о концертах: название группы и, через запятую с пробелом, дата концерта в формате ДД.ММ.ГГГГ.\n",
        "Каждая запись вводится с новой строки. Название группы может содержать любые символы, кроме запятой и точки.\n",
        "У каждой группы может быть любое количество концертов, но в каждой строке указывается информация только про один концерт.\n",
        "Когда записи заканчиваются, на отдельной строке вводится слово \"END\".\n",
        "\n",
        "ФОРМАТ ВЫВОДА\n",
        "Название группы с наибольшим количеством концертов в 2023 году и, через пробел, количество концертов.\n",
        "Гарантируется, что такая группа только одна.\n",
        "\n",
        "Для примера:\n",
        "Ввод\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "Агата Кристи, 23.02.2024\n",
        "Веселые программисты, 19.06.2023\n",
        "Агата Кристи, 25.02.2023\n",
        "Питоняшки, 27.08.2023\n",
        "Питоняшки, 04.05.2023\n",
        "Питоняшки, 27.02.2024\n",
        "END\n",
        "--------------------------------------------------\n",
        "Питоняшки 2\n",
        "\n",
        "Питоняшки, 24.03.2024\n",
        "Питоняшки, 21.05.2024\n",
        "Глас Питона, 23.05.2023\n",
        "Глас Питона, 20.09.2023\n",
        "Би-2, 31.03.2023\n",
        "Глас Питона, 24.12.2023\n",
        "END\n",
        "\n",
        "--------------------------------------------------\n",
        "Глас Питона 3\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "Z1TgBgJh9bde"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "dict_concerts2023 = {}\n",
        "\n",
        "while True:\n",
        "  line_concerts = input().strip()\n",
        "  if line_concerts == 'END':\n",
        "    break\n",
        "  band_name, date = line_concerts.rsplit(',',1)\n",
        "  if date.split('.')[2] == '2023':\n",
        "    dict_concerts2023[band_name] = dict_concerts2023.get(band_name,0)+1\n",
        "\n",
        "if dict_concerts2023:\n",
        "  max_n_concerts = max(dict_concerts2023.values())\n",
        "  for key, value in dict_concerts2023.items():\n",
        "    if value == max_n_concerts:\n",
        "      print(key, value)\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "iQ1ZVUAlXJnz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "40648f90-803c-45d8-ba7c-dc74fd12ec1f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Питоняшки, 24.03.2024\n",
            "Питоняшки, 21.05.2024\n",
            "Глас Питона, 23.05.2023\n",
            "Глас Питона, 20.09.2023\n",
            "Би-2, 31.03.2023\n",
            "Глас Питона, 24.12.2023\n",
            "END\n",
            "Глас Питона 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 4</b>"
      ],
      "metadata": {
        "id": "wDt-2r4t-dIA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Вы планируете купить книгу по программированию и изучаете ассортимент в разных магазинах.\n",
        "Найдите книгу с наименьшей средней ценой.\n",
        "\n",
        "ФОРМАТ ВВОДА\n",
        "Записи о найденных книгах: название книги и, через дефис, стоимость книги. Каждая запись вводится с новой строки.\n",
        "Название книги может содержать любые символы, кроме дефис.\n",
        "Про каждую книгу может быть любое количество записей, и цены в разных магазинах могут различаться,\n",
        "но в каждой строке указывается только одна цена книги.\n",
        "Когда записи заканчиваются, на отдельной строке вводится слово \"СТОП\".\n",
        "\n",
        "ФОРМАТ ВЫВОДА\n",
        "Название книги, у которой самая маленькая средняя цена и, через пробел, эта цена, округленная до\n",
        "целого числа с помощью функции round().\n",
        "Гарантируется, что такая книга только одна.\n",
        "\n",
        "Для примера:\n",
        "Ввод\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "Python для всех-600\n",
        "Изучаем Python-1200\n",
        "Python для всех-700\n",
        "Python для всех-680\n",
        "Изучаем Python-1300\n",
        "СТОП\n",
        "--------------------------------------------------\n",
        "Python для всех 660\n",
        "\n",
        "Python для всех-640\n",
        "Python для всех-780\n",
        "Python для всех-500\n",
        "Алгоритмы-600\n",
        "Python для всех-670\n",
        "Алгоритмы-900\n",
        "Изучаем Python-1300\n",
        "Изучаем Python-1250\n",
        "Python для всех-610\n",
        "СТОП\n",
        "--------------------------------------------------\n",
        "Python для всех 640\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "UFTOBvGE9bgh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "Ez51FHwWXKqS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 5</b>"
      ],
      "metadata": {
        "id": "WsPcTHfo-eto"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Маргарита изучает описание маршрута водителя транспортной компании и хочет понять,\n",
        "сколько раз он посетил каждый населенный пункт. Известно, что название каждого населенного пункта начинается с большой буквы.\n",
        "Помогите Маргарите найти все населенные пункты и узнать количество посещений каждого из них.\n",
        "\n",
        "ФОРМАТ ВВОДА\n",
        "Текстовый файл data_task5.txt, в котором записано описание маршрута.\n",
        "Название каждого населенного пункта начинается с большой буквы.\n",
        "Гарантируется, что других слов, начинающихся с большой буквы, в файле нет.\n",
        "Также гарантируется, что до и после названия населенного пункта стоят пробелы.\n",
        "\n",
        "ФОРМАТ ВЫВОДА\n",
        "Текстовый файл final_task5.txt в кодировке utf-8, где каждое название населенного пункта, упомянутое в файле data_task5.txt,\n",
        "записано в формате \"Название: <название>, посещений: <кол-во посещений>\".\n",
        "Каждый населенный пункт должен быть записан на отдельной строке, их нужно отсортировать в алфавитном порядке.\n",
        "\n",
        "ДОПОЛНИТЕЛЬНО\n",
        "В открытом тесте используются файлы data_task5.txt и final_task5.txt. Вы можете скачать их и проверить свое решение локально.\n",
        "В примере в первой колонке отображается номер теста (0 — открытый тест),\n",
        "считывать это число или использовать его в вашем решении не нужно.\n",
        "\n",
        "Для примера:\n",
        "Тест\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "0\n",
        "--------------------------------------------------\n",
        "FILE:\n",
        "Название: Москва, посещений: 2\n",
        "Название: Пермь, посещений: 3\n",
        "Название: Рязань, посещений: 2\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "hnGsNBgu9bnt"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "m872lAAJXLzu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 6</b>"
      ],
      "metadata": {
        "id": "Tr0vDmSS-hW3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Вася готовится к контрольной работе по политологии и по мере прочтения материала помечает непонятные слова знаком * .\n",
        "\"Звездочку\" студент ставит в конце каждого непонятого им слова.\n",
        "Помогите Васе собрать все непонятные слова и подсчитайте, сколько раз каждое слово,\n",
        "количество символов в котором больше или равно семи, он пометил \"звездочкой\".\n",
        "Будем считать, что слова в тексте разделены пробелами.\n",
        "\n",
        "ФОРМАТ ВВОДА\n",
        "Текстовый файл notes_task6.txt, в котором записан конспект Васи с пометками.\n",
        "Непонятым считается любое слово, заканчивающееся знаком '*'.   Между словом и * точно не стоят пробелы.\n",
        "Также дана строка punctuation с символами, которые могут встречаться в тексте — необходимо будет очистить от них текст.\n",
        "\n",
        "ФОРМАТ ВЫВОДА\n",
        "Текстовый файл words_task6.txt в кодировке utf-8, где каждое слово со звездочкой,\n",
        "количеством символов в котором больше или равно семи, упомянутое в файле notes_task6.txt,\n",
        "записано в формате \"слово: <слово>, упоминаний: <кол-во упоминаний>\".\n",
        "Каждое слово должно быть записано на отдельной строке, их нужно отсортировать в алфавитном порядке.\n",
        "\n",
        "ДОПОЛНИТЕЛЬНО\n",
        "В открытом тесте используются файлы notes_task6.txt и words_task6.txt.\n",
        "Вы можете скачать их и проверить свое решение локально.\n",
        "В примере в первой колонке отображается номер теста (0 — открытый тест),\n",
        "считывать это число или использовать его в вашем решении не нужно.\n",
        "\n",
        "Для примера:\n",
        "Тест\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "0\n",
        "--------------------------------------------------\n",
        "FILE:\n",
        "слово: monarchy, упоминаний: 1\n",
        "слово: political, упоминаний: 5\n",
        "слово: regimes, упоминаний: 2\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "BUCzcxXQ9brD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n",
        "# можно использовать такой шаблон для различных символов\n",
        "punctuation = '!#$%&()+,-–./:;<=>?@^_'\n",
        "\n"
      ],
      "metadata": {
        "id": "Fer0I3yHXMk3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 7</b>"
      ],
      "metadata": {
        "id": "AcUypbua-iZp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Ефросинья изучает, какие тарифы домашнего интернета приносят больший доход телекоммуникационной компании, в которой она работает.\n",
        "Помогите Ефросинье собрать информацию о среднем доходе по каждому тарифу.\n",
        "\n",
        "ФОРМАТ ВВОДА\n",
        "Структурированный файл data_task7.csv, в котором записана информация о клиентах и выбранном тарифе.\n",
        "В каждой строке записан ID клиента, название тарифа и его стоимость через точку с запятой. Например \"ID5637;Быстрый;500\".\n",
        "Гарантируется, что в ID клиентов и в названиях тарифов нет \";\" (точки с запятой).\n",
        "В каждой строке хранится информация только об одном клиенте.\n",
        "\n",
        "ФОРМАТ ВЫВОДА\n",
        "Текстовый файл final_task7.txt в кодировке utf-8, где каждое название тарифа,\n",
        "упомянутое в файле data_task7.сsv, записано в формате \"Название: <название>, средний доход: <сумма>\".\n",
        "Каждый тариф должен быть записан на отдельной строке, их нужно отсортировать по среднему доходу (от меньшего к большему).\n",
        "\n",
        "ДОПОЛНИТЕЛЬНО\n",
        "В открытом тесте используются файл data_task7.csv и final_task7.txt.\n",
        "Вы можете скачать его и проверить свое решение локально;\n",
        "в примере в первой колонке отображается номер теста (0 — открытый тест),\n",
        "считывать это число или использовать его в вашем решении не нужно.\n",
        "\n",
        "Для примера:\n",
        "Тест\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "0\n",
        "--------------------------------------------------\n",
        "FILE:\n",
        "Название: Медленный, средний доход: 250.0\n",
        "Название: Быстрый, средний доход: 533.33\n",
        "Название: БыстрыйNew, средний доход: 748.57\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "3PFJwBB59buL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "P5jr3Hr7XNiB"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 8</b>"
      ],
      "metadata": {
        "id": "DQA7eesu-jZD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Екатерина хочет найти среднюю цену для каждого вида пирожных, которые продаются в ее районе.\n",
        "Помогите Екатерине собрать информацию о каждом виде пирожных.\n",
        "\n",
        "ФОРМАТ ВВОДА\n",
        "Текстовый файл cakes_task8.csv в кодировке utf-8 , в котором через точку с запятой записана информация о пирожных,\n",
        "их цене, кофейне и индикатор наличия глютена (1 — если пирожное с глютеном и 0 — если без).\n",
        "Каждая строка имеет вид <название пирожного>;<цена>;<название кофейни>;<индикатор наличия глютена> .\n",
        "Например, \"Павлова;200;Шоколадница;1\".\n",
        "Гарантируется, что в названиях пирожных и кофеен нет \";\" (точки с запятой).\n",
        "В каждой строке записана информация только об одном пирожном.\n",
        "\n",
        "ФОРМАТ ВЫВОДА\n",
        "Текстовый файл mean_price_task8.txt  в кодировке  utf-8, где каждое пирожное, упомянутое в файле cakes_task8.сsv,\n",
        "записано в формате \"Название: <название>, средняя цена: <средняя цена>\".\n",
        "Каждое пирожное, упомянутое в файле нужно отсортировать по алфавиту,\n",
        "цену за каждое пирожное необходимо округлить до целого с помощью функции round().\n",
        "\n",
        "ДОПОЛНИТЕЛЬНО\n",
        "В открытом тесте используются файлы cakes_task8.csv и mean_price_task8.txt.\n",
        "Вы можете скачать их и проверить свое решение локально.\n",
        "В примере в первой колонке отображается номер теста (0 — открытый тест),\n",
        "считывать это число или использовать его в вашем решении не нужно.\n",
        "\n",
        "Для примера:\n",
        "Тест\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "0\n",
        "--------------------------------------------------\n",
        "FILE:\n",
        "Название: Наполеон, средняя цена: 275\n",
        "Название: Павлова, средняя цена: 220\n",
        "Название: Трубочка с кремом, средняя цена: 355\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "4W95x4z99bw5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "q8Eg_AFwXOYY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 9</b>"
      ],
      "metadata": {
        "id": "1g3o-oTB-kXS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Реализуйте программу, которая помогает исследователю определить, кого из респондентов можно пригласить на интервью:\n",
        "\n",
        "* На первой строке через пробел вводятся имена респондентов, которые любят кофе.\n",
        "* На второй строке через пробел вводятся имена респондентов, которые любят чай.\n",
        "* На третьей строке через пробел вводятся имена респондентов, возраст которых 25 лет и более.\n",
        "* Гарантируется, что имена респондентов в каждой строке уникальные.\n",
        "* Любая строка может отказаться пустой.\n",
        "* Выведите через пробел имена респондентов, которые моложе 25 лет и любят либо только чай, либо только кофе.\n",
        "Имена отсортируйте в алфавитном порядке.\n",
        "\n",
        "Для примера:\n",
        "Ввод\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "Рита Лиза Марина Кирилл Катя Влад\n",
        "Настя Влад Марина Ира Кирилл\n",
        "Кирилл Лиза Ира Настя Максим\n",
        "--------------------------------------------------\n",
        "Катя Рита\n",
        "\n",
        "Лиза Кирилл\n",
        "Максим Лера\n",
        "Витя Катя\n",
        "--------------------------------------------------\n",
        "Кирилл Лера Лиза Максим\n",
        "\n",
        "Лиза Миша Вова\n",
        "Максим Ира Катя\n",
        "Максим Ира Катя Вова Лиза Миша\n",
        "--------------------------------------------------\n",
        "\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "oJKxJ8gY9bzu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "fn_EYWSnXPUQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 10</b>"
      ],
      "metadata": {
        "id": "F3hjWy6v-lFF"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Реализуйте программу, выбирающую респондентов по названию их любимого десерта:\n",
        "\n",
        "* Дан словарь fav_desserts, в котором ключами являются имена респондентов (строки),\n",
        "а значениями — списки названий их любимых десертов (строки).\n",
        "* Вводится название десерта.\n",
        "* Программа проверяет наличие десерта в словаре и печатает имена респондентов, которые его любят.\n",
        "* Имена печатаются в том же порядке, в котором они записаны в словаре.\n",
        "\n",
        "Для примера:\n",
        "Ввод\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "Тирамису\n",
        "--------------------------------------------------\n",
        "Ира\n",
        "Карина\n",
        "Настя\n",
        "\n",
        "Мармелад\n",
        "--------------------------------------------------\n",
        "\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "dX5HhNrM9b2r"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n",
        "# можно использовать такой шаблон для словаря\n",
        "fav_desserts = {\n",
        "    'Ира' : ['Тирамису', 'Марципан', 'Яблочный пирог'],\n",
        "    'Марина' : ['Яблочный пирог', 'Мороженое'],\n",
        "    'Максим' : ['Марципан', 'Брауни', 'Мидальный торт'],\n",
        "    'Карина' : ['Пишмание', 'Брауни', 'Тирамису', 'Марципан'],\n",
        "    'Настя' : ['Лимбургский пирог', 'Тирамису', 'Брауни']\n",
        "}\n",
        "\n"
      ],
      "metadata": {
        "id": "LsWim1-kXQNe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 11</b>"
      ],
      "metadata": {
        "id": "WMa3HZYiX7Fk"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Напишите программу на Python для поиска самых длинных слов в файле notes_task11.txt».\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "nOsRAX8nXRGp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "UxM2vriEXRKj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 12</b>"
      ],
      "metadata": {
        "id": "MHwPjl2oX8IH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Напишите программу на Python для преобразования римской цифры в целое число.\n",
        "У вас есть «MMMCMLXXXVI», «MMMM» и «C».\n",
        "Крайне желательно сделать программу через ООП.\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "fzLxRttvXROd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "snbZG7kNXRXM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 13</b>"
      ],
      "metadata": {
        "id": "oLxn-To9X9EX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Напишите программу на Python для преобразования целого числа в римскую цифру.\n",
        "У вас есть 1, 4000 и 3986.\n",
        "Крайне желательно сделать программу через ООП.\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "b5siwZn4XRbT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "RioV3lWOXRkN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 14</b>"
      ],
      "metadata": {
        "id": "LT3qRazqX-E7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "'''\n",
        "\n",
        "Напишите программу на Python для реализации pow(x, n).\n",
        "У вас есть пары (x, n): (2, -3), (3, 5) и (100, 0).\n",
        "Крайне желательно сделать программу через ООП.\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "VZd26UtCXRo2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "sCOoghG0X-yd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 15</b>"
      ],
      "metadata": {
        "id": "Pw1q07twYAl2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "У Марины есть 500 рублей и список покупок. Напишите программу, которая поможет определить,\n",
        "на какое количество продуктов для каждой позиции списка ей хватит денег.\n",
        "\n",
        "ФОРМАТ ВВОДА\n",
        "На первой строке через запятую и пробел записываются данные о товаре и о его стоимости (вида <товар>: <цена>).\n",
        "Гарантируется, что строка состоит из данных минимум об одном товаре.\n",
        "\n",
        "ФОРМАТ ВЫВОДА\n",
        "Список с количеством каждого товара, которое Марина может купить за эти деньги.\n",
        "Далее на отдельной строке печатается информаци о товаре (в формате <товар>: <цена>),\n",
        "который Марина может приобрести в наибольшем количестве. Гарантируется, что такой товар только один.\n",
        "\n",
        "Для примера:\n",
        "Ввод\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "хлеб: 200, яблоки: 120, молоко: 150, макароны: 300\n",
        "--------------------------------------------------\n",
        "2, 4, 3, 1\n",
        "яблоки: 120\n",
        "\n",
        "макароны: 500, яблоки: 700, тушенка: 200\n",
        "--------------------------------------------------\n",
        "1, 0, 2\n",
        "тушенка: 200\n",
        "\n",
        "яблоки: 620\n",
        "--------------------------------------------------\n",
        "0\n",
        "яблоки: 620\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "Qyj5j-vhX-2f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "6zsZkpNNX-7V"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 16</b>"
      ],
      "metadata": {
        "id": "vRTgnNN_YB_B"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Исследователь Витя хочет выбрать людей для интервью. Основным критерием он считает доход и хочет выбрать того респондента,\n",
        "чей средний доход за последние три месяца был самым высоким. Помогите Вите выбрать респондента.\n",
        "\n",
        "ФОРМАТ ВВОДА\n",
        "Текстовый файл data_task16.csv, в котором записаны данные о респондентах в следующем виде:\n",
        "имя, фамилия, возраст, доход за первый месяц, доход за второй месяц, доход за третий месяц.\n",
        "Например, \"Алла,Иванова,28,1930,8305,384\".\n",
        "Разделителем в файле служат запятые.\n",
        "Гарантируется, что в файле есть минимум одна строка с данными.\n",
        "\n",
        "ФОРМАТ ВЫВОДА\n",
        "Строка типа <имя фамилия> (например, 'Алла Иванова') — имя респондента, чей средний доход за три месяца,\n",
        "округленный с помощью функции round()), был самым большим.\n",
        "Гарантируется, что такой респондент только один.\n",
        "Для подсчета среднего дохода необходимо сложить доход за три месяца и разделить на 3.\n",
        "\n",
        "ДОПОЛНИТЕЛЬНО\n",
        "В открытом тесте используются файл data_task16.csv.  Вы можете скачать его и проверить свое решение локально.\n",
        "В примере в первой колонке отображается номер теста (0 — открытый тест),\n",
        "считывать это число или использовать его в вашем решении не нужно.\n",
        "\n",
        "Для примера:\n",
        "Тест\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "0\n",
        "--------------------------------------------------\n",
        "Лариса Иванова\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "vm6gUgqGX-_9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "f7n-ecB0X_Ds"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 17</b>"
      ],
      "metadata": {
        "id": "sgjFeBTZYDb5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Исследователь собирает информацию о респондентах, их доходах и расходах за месяц.\n",
        "Для каждого он записывает имя и через запятую и пробел доходы и расходы респондента.\n",
        "\n",
        "ФОРМАТ ВВОДА\n",
        "Записи: имя респондента и, через запятую и пробел, доходы и расходы (разделенные знаком нижнего подчеркивания (_)).\n",
        "Каждая запись вводится с новой строки. Имя респондента может содержать любые символы, кроме запятой и знака нижнего подчеркивания.\n",
        "Информация об одном респонденте считывается только один раз.\n",
        "Гарантируется, что имена респондентов не повторяются.\n",
        "Когда записи заканчиваются, на отдельной строке вводится слово \"СТОП\".\n",
        "\n",
        "ФОРМАТ ВЫВОДА\n",
        "Имена респондентов, которые ушли в минус по итогам месяца (расходы превысили доходы).\n",
        "Имена должны выводиться в алфавитном порядке через запятую и пробел.\n",
        "\n",
        "Для примера:\n",
        "Ввод\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "Митя, 1990_1268\n",
        "Ира, 1020_1290\n",
        "Витя, 4573_3456\n",
        "Лариса, 2467_7890\n",
        "Ева-Мария, 8300_10000\n",
        "СТОП\n",
        "--------------------------------------------------\n",
        "Ева-Мария, Ира, Лариса\n",
        "\n",
        "Кирилл, 1400_1200\n",
        "СТОП\n",
        "--------------------------------------------------\n",
        "\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "l8xiF5VIX_IU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "bwIB31QCX_M2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 18</b>"
      ],
      "metadata": {
        "id": "ApT3vN3FYEWU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Реализуйте следующую программу:\n",
        "* В цикле while считываются строки вида \"<имя, возраст, пол>\" до тех пор, пока не введена строка \"СТОП\".\n",
        "* Сохраните в отдельные списки имена женщин и мужчин старше 20 лет.\n",
        "* Гарантируется, что до строки \"СТОП\" будет введена как минимум одна строка.\n",
        "* Напечатайте через запятую и пробел имена женщин старше 20 лет.\n",
        "* На следующей строке напечатайте через запятую и пробел имена мужчин старше 20 лет.\n",
        "* Имена должны идти в том же порядке, что и при вводе.\n",
        "* Если подходящих под условие (старше 20 лет) людей нет, то программа ничего не выводит.\n",
        "\n",
        "Для примера:\n",
        "Ввод\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "Оля, 19, женский\n",
        "Ира, 28, женский\n",
        "Кирилл, 20, мужской\n",
        "Марина, 23, женский\n",
        "Игорь, 25, мужской\n",
        "Мария, 29, женский\n",
        "Олег, 27, мужской\n",
        "СТОП\n",
        "--------------------------------------------------\n",
        "Ира, Марина, Мария\n",
        "Игорь, Олег\n",
        "\n",
        "Оля, 30, женский\n",
        "Мария, 29, женский\n",
        "СТОП\n",
        "--------------------------------------------------\n",
        "Оля, Мария\n",
        "\n",
        "Игорь, 15, мужской\n",
        "СТОП\n",
        "--------------------------------------------------\n",
        "\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "T6Ntwc1PX_Rf"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "oT2r-oozX_XF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 19</b>"
      ],
      "metadata": {
        "id": "ExD6tX5rYFUu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Реализуйте следующую программу:\n",
        "* На первой через пробел вводятся слова.\n",
        "* На второй строке через пробел вводятся целые числа — 1 или 0. Эти числа являются результатом работы алгоритма, который определяет, есть в слове строчные буквы (1) или нет (0).\n",
        "* Программа должна проверять, корректно ли работает алгоритм.\n",
        "* Если есть слова, для которых алгоритм сработал неправильно, то программа сохраняет их в отдельный список.\n",
        "* В конце программа печатает получившийся список. Слова в нем должны идти в том же порядке, что и при вводе.\n",
        "* Если таких слов нет, программа печатает пустой список.\n",
        "\n",
        "Для примера:\n",
        "Ввод\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "Котик вафЛя ВРЕНЬЕ телефон котик вафля КОТ собачка\n",
        "1 0 0 1 1 1 0 1\n",
        "--------------------------------------------------\n",
        "['вафЛя']\n",
        "\n",
        "котик песик мопсик лисичка\n",
        "1 1 1 1\n",
        "--------------------------------------------------\n",
        "[]\n",
        "\n",
        "марк МАРК Люба Вита ВИка ЛоРа КЛАВА\n",
        "1 0 0 0 1 0 1\n",
        "--------------------------------------------------\n",
        "['Люба', 'Вита', 'ЛоРа', 'КЛАВА']\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "6IS1k2iTX_dG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n"
      ],
      "metadata": {
        "id": "9SNO8n6OX_iY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## <b>Задача 20</b>"
      ],
      "metadata": {
        "id": "VY3sB_-qYGRv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Условие\n",
        "\n",
        "'''\n",
        "\n",
        "Петя хочет проверить, сколько денег он потратил в каждый месяц. Напишите программу, которая поможет Пете.\n",
        "\n",
        "ФОРМАТ ВВОДА\n",
        "На первой строке вводятся траты Пети в формате '<день>.<месяц> - <сумма трат>'.\n",
        "Между собой записи о тратах разделены запятой с пробелом.\n",
        "Гарантируется, что строка состоит минимум из одной записи.\n",
        "\n",
        "ФОРМАТ ВЫВОДА\n",
        "Названия месяцев, отсортированные от наибольших  суммарных трат к наименьшим.\n",
        "Гарантируется, что месяцев с одинаковыми тратами нет.\n",
        "Каждое название должно быть написано с новой строки.\n",
        "\n",
        "Для примера:\n",
        "Ввод\n",
        "--------------------------------------------------\n",
        "Результат\n",
        "\n",
        "12.01 - 200, 16.02 - 700, 10.01 - 800, 07.03 - 100, 08.02 - 600, 12.11 - 170, 17.12 - 180, 15.02 - 800\n",
        "--------------------------------------------------\n",
        "февраль\n",
        "январь\n",
        "декабрь\n",
        "ноябрь\n",
        "март\n",
        "\n",
        "10.01 - 700, 15.02 - 800\n",
        "--------------------------------------------------\n",
        "февраль\n",
        "январь\n",
        "\n",
        "''';"
      ],
      "metadata": {
        "id": "9TGIWdC_X_nn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Решение\n",
        "\n",
        "# Ниже показан пример решения.\n",
        "# Может быть решение не самое оптимальное.\n",
        "# Если сделали лучше, то смело пишите :)\n",
        "\n",
        "# можно использовать такой шаблон для списка\n",
        "months = [\n",
        "    'январь', 'февраль', 'март', 'апрель', 'май',\n",
        "    'июнь', 'июль', 'август', 'сентябрь',\n",
        "    'октябрь', 'ноябрь', 'декабрь'\n",
        "]\n",
        "\n"
      ],
      "metadata": {
        "id": "k7nYE8nKX_x5"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
